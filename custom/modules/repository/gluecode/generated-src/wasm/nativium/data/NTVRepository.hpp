// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#pragma once

#include "djinni/wasm/djinni_wasm.hpp"
#include "nativium/data/Repository.hpp"

namespace djinni_generated {

struct NTVRepository : ::djinni::JsInterface<::nativium::data::Repository, NTVRepository> {
    using CppType = std::shared_ptr<::nativium::data::Repository>;
    using CppOptType = std::shared_ptr<::nativium::data::Repository>;
    using JsType = em::val;
    using Boxed = NTVRepository;

    static CppType toCpp(JsType j) { return _fromJs(j); }
    static JsType fromCppOpt(const CppOptType& c) { return {_toJs(c)}; }
    static JsType fromCpp(const CppType& c) {
        djinni::checkForNull(c.get(), "NTVRepository::fromCpp");
        return fromCppOpt(c);
    }

    static em::val cppProxyMethods();

    static em::val shared();
    static void open(const CppType& self, const std::string& w_path);
    static void close(const CppType& self);
    static void test(const CppType& self);
    static em::val getInfo(const CppType& self);
    static std::string getSqliteVersion(const CppType& self);
    static em::val getTableList(const CppType& self);
    static em::val getViewList(const CppType& self);
    static em::val getColumns(const CppType& self, const std::string& w_name);
    static em::val getRows(const CppType& self, const std::string& w_name,const std::string& w_sortBy,bool w_descending,int32_t w_page,int32_t w_rowsPerPage);

};

}  // namespace djinni_generated
