// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "nativium/data/NTVRepository.hpp"  // my header
#include "nativium/data/NTVRepositoryColumn.hpp"
#include "nativium/data/NTVRepositoryInfo.hpp"
#include "nativium/data/NTVRepositoryRows.hpp"
#include "nativium/data/NTVRepositoryTable.hpp"
#include "nativium/data/NTVRepositoryView.hpp"

namespace djinni_generated {

em::val NTVRepository::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "open",
        "close",
        "test",
        "getInfo",
        "getSqliteVersion",
        "getTableList",
        "getViewList",
        "getColumns",
        "getRows",
    });
    return methods;
}

em::val NTVRepository::shared() {
    try {
        auto r = ::nativium::data::Repository::shared();
        return ::djinni_generated::NTVRepository::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVRepository>::handleNativeException(e);
    }
}
void NTVRepository::open(const CppType& self, const std::string& w_path) {
    try {
        self->open(::djinni::String::toCpp(w_path));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVRepository::close(const CppType& self) {
    try {
        self->close();
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVRepository::test(const CppType& self) {
    try {
        self->test();
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
em::val NTVRepository::getInfo(const CppType& self) {
    try {
        auto r = self->getInfo();
        return ::djinni_generated::NTVRepositoryInfo::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVRepositoryInfo>::handleNativeException(e);
    }
}
std::string NTVRepository::getSqliteVersion(const CppType& self) {
    try {
        auto r = self->getSqliteVersion();
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
em::val NTVRepository::getTableList(const CppType& self) {
    try {
        auto r = self->getTableList();
        return ::djinni::List<::djinni_generated::NTVRepositoryTable>::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::List<::djinni_generated::NTVRepositoryTable>>::handleNativeException(e);
    }
}
em::val NTVRepository::getViewList(const CppType& self) {
    try {
        auto r = self->getViewList();
        return ::djinni::List<::djinni_generated::NTVRepositoryView>::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::List<::djinni_generated::NTVRepositoryView>>::handleNativeException(e);
    }
}
em::val NTVRepository::getColumns(const CppType& self, const std::string& w_name) {
    try {
        auto r = self->getColumns(::djinni::String::toCpp(w_name));
        return ::djinni::List<::djinni_generated::NTVRepositoryColumn>::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::List<::djinni_generated::NTVRepositoryColumn>>::handleNativeException(e);
    }
}
em::val NTVRepository::getRows(const CppType& self, const std::string& w_name,const std::string& w_sortBy,bool w_descending,int32_t w_page,int32_t w_rowsPerPage) {
    try {
        auto r = self->getRows(::djinni::String::toCpp(w_name),
                ::djinni::String::toCpp(w_sortBy),
                ::djinni::Bool::toCpp(w_descending),
                ::djinni::I32::toCpp(w_page),
                ::djinni::I32::toCpp(w_rowsPerPage));
        return ::djinni_generated::NTVRepositoryRows::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVRepositoryRows>::handleNativeException(e);
    }
}

EMSCRIPTEN_BINDINGS(nativium_data_repository) {
    em::class_<::nativium::data::Repository>("Repository")
        .smart_ptr<std::shared_ptr<::nativium::data::Repository>>("Repository")
        .function("nativeDestroy", &NTVRepository::nativeDestroy)
        .class_function("shared", NTVRepository::shared)
        .function("open", NTVRepository::open)
        .function("close", NTVRepository::close)
        .function("test", NTVRepository::test)
        .function("getInfo", NTVRepository::getInfo)
        .function("getSqliteVersion", NTVRepository::getSqliteVersion)
        .function("getTableList", NTVRepository::getTableList)
        .function("getViewList", NTVRepository::getViewList)
        .function("getColumns", NTVRepository::getColumns)
        .function("getRows", NTVRepository::getRows)
        ;
}

}  // namespace djinni_generated
