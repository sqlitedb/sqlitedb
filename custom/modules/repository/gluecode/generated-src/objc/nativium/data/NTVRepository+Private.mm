// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "nativium/data/NTVRepository+Private.h"
#import "nativium/data/NTVRepository.h"
#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#import "nativium/data/NTVRepositoryColumn+Private.h"
#import "nativium/data/NTVRepositoryInfo+Private.h"
#import "nativium/data/NTVRepositoryRows+Private.h"
#import "nativium/data/NTVRepositoryTable+Private.h"
#import "nativium/data/NTVRepositoryView+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NTVRepository ()

- (id)initWithCpp:(const std::shared_ptr<::nativium::data::Repository>&)cppRef;

@end

@implementation NTVRepository {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nativium::data::Repository>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nativium::data::Repository>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NTVRepository *)shared {
    try {
        auto objcpp_result_ = ::nativium::data::Repository::shared();
        return ::djinni_generated::Repository::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)open:(nonnull NSString *)path {
    try {
        _cppRefHandle.get()->open(::djinni::String::toCpp(path));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)close {
    try {
        _cppRefHandle.get()->close();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)test {
    try {
        _cppRefHandle.get()->test();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NTVRepositoryInfo *)getInfo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getInfo();
        return ::djinni_generated::RepositoryInfo::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getSqliteVersion {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSqliteVersion();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NTVRepositoryTable *> *)getTableList {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTableList();
        return ::djinni::List<::djinni_generated::RepositoryTable>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NTVRepositoryView *> *)getViewList {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getViewList();
        return ::djinni::List<::djinni_generated::RepositoryView>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NTVRepositoryColumn *> *)getColumns:(nonnull NSString *)name {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getColumns(::djinni::String::toCpp(name));
        return ::djinni::List<::djinni_generated::RepositoryColumn>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NTVRepositoryRows *)getRows:(nonnull NSString *)name
                                sortBy:(nonnull NSString *)sortBy
                            descending:(BOOL)descending
                                  page:(int32_t)page
                           rowsPerPage:(int32_t)rowsPerPage {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getRows(::djinni::String::toCpp(name),
                                                           ::djinni::String::toCpp(sortBy),
                                                           ::djinni::Bool::toCpp(descending),
                                                           ::djinni::I32::toCpp(page),
                                                           ::djinni::I32::toCpp(rowsPerPage));
        return ::djinni_generated::RepositoryRows::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Repository::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Repository::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NTVRepository>(cpp);
}

}  // namespace djinni_generated

@end
