// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

package com.nativium.data;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Repository {
    public abstract void open(String path);

    public abstract void close();

    public abstract void test();

    public abstract RepositoryInfo getInfo();

    public abstract String getSqliteVersion();

    public abstract ArrayList<RepositoryTable> getTableList();

    public abstract ArrayList<RepositoryView> getViewList();

    public abstract ArrayList<RepositoryColumn> getColumns(String name);

    public abstract RepositoryRows getRows(String name, String sortBy, boolean descending, int page, int rowsPerPage);

    public static native Repository shared();

    public static final class CppProxy extends Repository
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void open(String path)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_open(this.nativeRef, path);
        }
        private native void native_open(long _nativeRef, String path);

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);

        @Override
        public void test()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_test(this.nativeRef);
        }
        private native void native_test(long _nativeRef);

        @Override
        public RepositoryInfo getInfo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInfo(this.nativeRef);
        }
        private native RepositoryInfo native_getInfo(long _nativeRef);

        @Override
        public String getSqliteVersion()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSqliteVersion(this.nativeRef);
        }
        private native String native_getSqliteVersion(long _nativeRef);

        @Override
        public ArrayList<RepositoryTable> getTableList()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTableList(this.nativeRef);
        }
        private native ArrayList<RepositoryTable> native_getTableList(long _nativeRef);

        @Override
        public ArrayList<RepositoryView> getViewList()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getViewList(this.nativeRef);
        }
        private native ArrayList<RepositoryView> native_getViewList(long _nativeRef);

        @Override
        public ArrayList<RepositoryColumn> getColumns(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getColumns(this.nativeRef, name);
        }
        private native ArrayList<RepositoryColumn> native_getColumns(long _nativeRef, String name);

        @Override
        public RepositoryRows getRows(String name, String sortBy, boolean descending, int page, int rowsPerPage)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRows(this.nativeRef, name, sortBy, descending, page, rowsPerPage);
        }
        private native RepositoryRows native_getRows(long _nativeRef, String name, String sortBy, boolean descending, int page, int rowsPerPage);
    }
}
